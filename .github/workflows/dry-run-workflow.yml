name: DRY RUN - Build and Package SimpleTwitchEmoteSounds (Testing)

on:
  # Only manual trigger for dry runs
  workflow_dispatch:
    inputs:
      test_version:
        description: 'Test version (e.g., 1.0.0-test)'
        required: true
        default: '2.1.1-test'
      skip_notarization:
        description: 'Skip macOS notarization (faster testing)'
        type: boolean
        default: true
      skip_upload:
        description: 'Skip upload to GitHub releases (local testing only)'
        type: boolean
        default: true
      platforms_to_test:
        description: 'Platforms to test (comma-separated: windows,macos-arm64,linux)'
        required: true
        default: 'windows,linux'

permissions:
  contents: read

jobs:
  # Generate test changelog
  generate-test-changelog:
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Test Version
        id: set-version
        run: |
          version="${{ github.event.inputs.test_version }}"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Testing with version: $version"

      - name: Generate Test Changelog
        id: changelog
        run: |
          cat > CHANGELOG.md << 'EOF'
          # DRY RUN Release ${{ github.event.inputs.test_version }}
          
          ## WARNING: This is a test release - DO NOT USE IN PRODUCTION
          
          ### What's Being Tested
          - Build process for all platforms
          - Velopack packaging and cross-platform asset creation
          - Code signing for macOS (if enabled)
          - Artifact generation and structure
          - AppImage creation (Linux)
          
          ### Test Configuration
          - **Version**: ${{ github.event.inputs.test_version }}
          - **Skip Notarization**: ${{ github.event.inputs.skip_notarization }}
          - **Skip Upload**: ${{ github.event.inputs.skip_upload }}
          - **Platforms**: ${{ github.event.inputs.platforms_to_test }}
          - **Triggered by**: @${{ github.actor }}
          - **Test Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ---
          **This is a development test build and should not be distributed to end users.**
          EOF
          
          changelog_content=$(cat CHANGELOG.md)
          # Escape for GitHub Actions output
          {
            echo "changelog<<EOF"
            echo "$changelog_content"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Upload Test Changelog
        uses: actions/upload-artifact@v4
        with:
          name: test-changelog
          path: CHANGELOG.md

  # Determine which platforms to build based on input
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Setup Build Matrix
        id: set-matrix
        run: |
          platforms="${{ github.event.inputs.platforms_to_test }}"
          matrix_configs="[]"
          
          if [[ $platforms == *"windows"* ]]; then
            matrix_configs=$(echo "$matrix_configs" | jq '. += [{
              "os": "windows-latest", "platform": "windows", "arch": "x64", "runtime": "win-x64", "executable": "SimpleTwitchEmoteSounds.exe", "icon_suffix": "ico", "setup_name": "TEST-Setup-Windows-x64.exe"
            }]')
          fi
          
          if [[ $platforms == *"macos-arm64"* ]]; then
            matrix_configs=$(echo "$matrix_configs" | jq '. += [{
              "os": "macos-latest", "platform": "macos", "arch": "arm64", "runtime": "osx-arm64", "executable": "SimpleTwitchEmoteSounds", "icon_suffix": "icns", "setup_name": "TEST-Setup-macOS-arm64.pkg"
            }]')
          fi
          
          if [[ $platforms == *"linux"* ]]; then
            matrix_configs=$(echo "$matrix_configs" | jq '. += [{
              "os": "ubuntu-latest", "platform": "linux", "arch": "x64", "runtime": "linux-x64", "executable": "SimpleTwitchEmoteSounds", "icon_suffix": "png", "setup_name": "TEST-SimpleTwitchEmoteSounds-linux-x64.AppImage"
            }]')
          fi
          
          echo "Selected platforms for testing:"
          echo "$matrix_configs" | jq -r '.[] | "  - \(.platform) \(.arch) on \(.os)"'
          matrix_json=$(echo "{\"include\":$matrix_configs}" | jq -c .)
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
  
  # Test build job based on the production workflow
  test-build:
    needs: [ generate-test-changelog, setup-matrix ]
    runs-on: ${{ matrix.os }}
    if: ${{ fromJson(needs.setup-matrix.outputs.matrix).include[0] != null }}
    
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Test Changelog
        uses: actions/download-artifact@v4
        with:
          name: test-changelog

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Import Apple Certificate (Test Mode)
        if: matrix.platform == 'macos' && github.event.inputs.skip_notarization == 'false'
        env:
          APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          if [ -n "$APPLE_CERTIFICATE_P12" ]; then
            echo "Setting up Apple certificates for testing..."
            security create-keychain -p temp_password temp.keychain
            security default-keychain -s temp.keychain  
            security unlock-keychain -p temp_password temp.keychain
            echo "$APPLE_CERTIFICATE_P12" | base64 --decode > certificate.p12
            security import certificate.p12 -k temp.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple: -s -k temp_password temp.keychain
            rm certificate.p12
          else
            echo "WARNING: No Apple certificates configured - signing will be skipped"
          fi

      - name: Test Application Build
        shell: pwsh
        run: |
          $publishDir = "./test-publish-${{ matrix.arch }}"
          Write-Host "Testing build process for ${{ matrix.platform }}..." -ForegroundColor Yellow
          dotnet publish SimpleTwitchEmoteSounds/SimpleTwitchEmoteSounds.csproj -c Release --self-contained -r ${{ matrix.runtime }} -o $publishDir /p:PublishTrimmed=false /p:PublishReadyToRun=false /p:PublishSingleFile=false
          if ($LASTEXITCODE -ne 0) {
              Write-Error "Test build failed!"
              exit 1
          }

      - name: Verify Test Build Structure
        shell: bash
        run: |
          publish_dir="./test-publish-${{ matrix.arch }}"
          if [[ -f "$publish_dir/${{ matrix.executable }}" ]]; then
            echo "✅ Main executable found."
          else
            echo "❌ ERROR: Main executable not found in $publish_dir !"
            ls -la "$publish_dir"
            exit 1
          fi

      - name: Install Velopack CLI
        run: dotnet tool install -g vpk

      - name: Test Velopack Package Creation (Windows)
        if: matrix.platform == 'windows'
        shell: pwsh
        run: |
          $publishDir = "./test-publish-${{ matrix.arch }}"
          $iconPath = "./SimpleTwitchEmoteSounds/Assets/icon.${{ matrix.icon_suffix }}"
          $vpkArgs = @("pack", "--packId", "SimpleTwitchEmoteSounds", "--packVersion", "${{ needs.generate-test-changelog.outputs.version }}", "--packDir", $publishDir, "--mainExe", "${{ matrix.executable }}", "--packTitle", "SimpleTwitchEmoteSounds (TEST)", "--releaseNotes", "CHANGELOG.md")
          if (Test-Path $iconPath) { $vpkArgs += @("--icon", $iconPath) }
          vpk @vpkArgs

      - name: Test Velopack Package Creation (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          publish_dir="./test-publish-${{ matrix.arch }}"
          icon_path="./SimpleTwitchEmoteSounds/Assets/icon.${{ matrix.icon_suffix }}"
          vpk_args=("pack" "--packId" "SimpleTwitchEmoteSounds" "--packVersion" "${{ needs.generate-test-changelog.outputs.version }}" "--packDir" "$publish_dir" "--mainExe" "${{ matrix.executable }}" "--packTitle" "SimpleTwitchEmoteSounds (TEST)" "--releaseNotes" "CHANGELOG.md" "--runtime" "${{ matrix.runtime }}")
          if [[ -f "$icon_path" ]]; then vpk_args+=("--icon" "$icon_path"); fi
          
          if [[ "${{ matrix.platform }}" == "macos" && "${{ github.event.inputs.skip_notarization }}" == "false" ]]; then
            APP_SIGNING_IDENTITY=$(security find-identity -v -p codesigning | grep "Developer ID Application" | head -1 | sed 's/.*"\(.*\)".*/\1/')
            INSTALLER_SIGNING_IDENTITY=$(security find-identity -v -p codesigning | grep "Developer ID Installer" | head -1 | sed 's/.*"\(.*\)".*/\1/')
            if [[ -n "$APP_SIGNING_IDENTITY" && -n "$INSTALLER_SIGNING_IDENTITY" ]]; then
                echo "🔑 Attempting to sign package for testing..."
                vpk_args+=("--signAppIdentity" "$APP_SIGNING_IDENTITY" "--signInstallIdentity" "$INSTALLER_SIGNING_IDENTITY")
          else
                echo "⚠️ Signing requested, but no developer identities were found in the keychain."
            fi
          fi
          
          vpk "${vpk_args[@]}" || echo "WARNING: Velopack packaging failed (this may be acceptable in a dry run)"

      - name: Verify Test Package Output
        shell: bash
        run: |
          echo "=== Test Package Verification ==="
          if [ -d "./Releases" ] && [ "$(ls -A ./Releases)" ]; then
            ls -la ./Releases/
          else
            echo "WARNING: No packages found in ./Releases directory."
          fi

      - name: Test Upload to GitHub Releases
        if: github.event.inputs.skip_upload == 'false'
        run: |
          echo "Testing upload to GitHub releases..."
          if [ -n "${{ secrets.STES_TOKEN }}" ]; then
            vpk upload github \
              --repoUrl https://github.com/Ganom/SimpleTwitchEmoteSounds \
              --releaseName "TEST - SimpleTwitchEmoteSounds ${{ needs.generate-test-changelog.outputs.version }}" \
              --tag "test-${{ needs.generate-test-changelog.outputs.version }}" \
              --token ${{ secrets.STES_TOKEN }} || echo "WARNING: Upload failed (this is OK for testing)"
          else
            echo "WARNING: STES_TOKEN not available - skipping upload test"
          fi

      - name: Upload Test Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-build-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            Releases/*
            test-publish-${{ matrix.arch }}/**/*
          retention-days: 7

      - name: Cleanup Test Keychain
        if: always() && matrix.platform == 'macos'
        run: |
          security delete-keychain temp.keychain 2>/dev/null || true

  # Final summary job
  test-release-summary:
    needs: [ generate-test-changelog, test-build ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download All Test Artifacts
        if: ${{ !cancelled() }}
        uses: actions/download-artifact@v4
        with:
          path: ./test-artifacts

      - name: Test Results Summary
        shell: bash
        run: |
          echo "## DRY RUN COMPLETE - TEST RESULTS SUMMARY" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.generate-test-changelog.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: ${{ github.event.inputs.platforms_to_test }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Skip Notarization**: ${{ github.event.inputs.skip_notarization }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Skip Upload**: ${{ github.event.inputs.skip_upload }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Generated Test Artifacts:**" >> $GITHUB_STEP_SUMMARY
          if [ -d "./test-artifacts" ]; then
            find ./test-artifacts -type f \( -name "*-Setup.exe" -o -name "*.pkg" -o -name "*.AppImage" -o -name "*.nupkg" -o -name "RELEASES" \) | while read file; do
              size=$(du -h "$file" | cut -f1)
              echo "   - \`$(basename "$file")\` ($size)" >> $GITHUB_STEP_SUMMARY
            done
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test-build.result }}" = "success" ]; then
            echo "✅ **All test builds completed successfully.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some test builds failed.** Review logs for details." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> [!WARNING]" >> $GITHUB_STEP_SUMMARY
          > echo "> This was a dry run. Do not distribute these builds." >> $GITHUB_STEP_SUMMARY